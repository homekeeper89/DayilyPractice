
- 팩토리란 다른 클래스의 객체를 생성하는 클래스를 일컫는다.
- 팩토리가 필요한 이유
    1. 객체 생성, 클래스 구현을 나눠 상호 의존도를 줄인다.
    2. 재활용 가능
    3. 클라이언트가 신경쓰는 일이 줄어든다.
예) 자동차 공장이 인형을 생산해야하는 경우?
    - 제조 기계는 인터페이스, CEO는 클라이언트
    - CEO는 제조하려는 객체와 제품을 만드는 인터페이스만 알고 있다.
- 심플 팩토리 패턴, 팩토리 메서드 패턴, 추상 팩토리 패턴 총 3가지 종류가 존재

- 팩토리 패턴의 장점 : 유연성과 포괄성을 갖추며 한 클래스에 종속되지 않는다. 
    -> ConcreateProduct가 아닌 인터페이스(Product)에 의존한다.
    -> 의존성을 줄일 수 있다.
